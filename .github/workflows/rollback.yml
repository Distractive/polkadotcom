name: Rollback

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: "Commit hash"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rollback:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Getting backup_path
        id: backup_path
        run: |
          backup_path="s3://${{ vars.DEPLOYMENT_BUCKET_BACKUP }}/${{ github.event.inputs.commit_hash }}.zip"
          echo "backup_path=$backup_path" >> $GITHUB_OUTPUT

      - name: Check if ZIP file exists in S3
        run: |
          if aws s3 ls "${{ steps.backup_path.outputs.backup_path }}" > /dev/null; then
            echo "Found ${{ steps.backup_path.outputs.backup_path }} in backup bucket."
          else
            echo "No backup found for path '${{ steps.backup_path.outputs.backup_path }}'."
            exit 1
          fi

      - name: Download ZIP from S3
        run: |
          echo "Downloading ${{ steps.backup_path.outputs.backup_path }}..."
          aws s3 cp ${{ steps.backup_path.outputs.backup_path }} website.zip

      - name: Unzip
        run: unzip website.zip -d website

      - name: Getting rollback file path
        id: rollback
        run: |
          tmp_path=s3://${{ vars.DEPLOYMENT_BUCKET }}/_rollback
          echo "rollback=$rollback" >> $GITHUB_OUTPUT

      - name: Upload files to temp folder
        run: |
          aws s3 sync website/apps/web/out/ ${{ steps.rollback.outputs.rollback }} \
            --cache-control "public, max-age=300, must-revalidate" \
            --only-show-errors

      - name: Atomic switch
        run: |
          aws s3 sync ${{ steps.rollback.outputs.rollback }} s3://${{ vars.DEPLOYMENT_BUCKET }}/ \
            --delete \
            --exact-timestamps \
            --only-show-errors

      - name: Cleanup rollback temp folder
        continue-on-error: true
        run: |
          aws s3 rm ${{ steps.rollback.outputs.rollback }} --recursive \
            --only-show-errors

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.DISTRIBUTION_ID }} \
            --paths "/*"
